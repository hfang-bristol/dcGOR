% Generated by roxygen2 (4.0.1): do not edit by hand
\name{dcAncestralML}
\alias{dcAncestralML}
\title{Function to reconstruct ancestral discrete states using fast maximum likelihood algorithm}
\usage{
dcAncestralML(x, phy, transition.model = c("different", "symmetric",
"same",
"customised"), customised.model = NULL, edge.length.power = 1,
initial.estimate = 0.1, verbose = T)
}
\arguments{
\item{x}{a vector of discrete states in the tips. It can be an unnamed
vector; in this case, assumedly it has the same order as in the tree
tips. More wisely, it is a named vector, whose names can be matched to
the tip labels of the tree. The names of this input vector can be more
than found in the tree labels, and they should contain all those in the
tree labels}

\item{phy}{an object of class 'phylo'}

\item{transition.model}{a character specifying the transition model. It
can be: "different" for all-transition-different model (such as
\eqn{matrix(c(0,1,2,0),2)}), "symmetric" for the symmetric model (such
as \eqn{matrix(c(0,1,1,0),2)} or \eqn{matrix(c(0,1,2,1,0,3,2,3,0),3)}),
"same" for all-transition-same model (such as
\eqn{matrix(c(0,1,1,0),2)}), "customised" for the user-customised model
(see the next parameter)}

\item{customised.model}{a matrix customised for the transition model.
It can be: \eqn{matrix(c(0,1,1,0),2)}, \eqn{matrix(c(0,1,2,0),2)}, or
\eqn{matrix(c(0,1,2,1,0,3,2,3,0),3)}}

\item{edge.length.power}{a non-negative value giving the exponent
transformation of the branch lengths. It is useful when determining
transition matrix between states}

\item{initial.estimate}{the initial value used for the maximum
likelihood estimation}

\item{verbose}{logical to indicate whether the messages will be
displayed in the screen. By default, it sets to TRUE for display}
}
\value{
a list of architectures, containing three components for "transition",
"states" and "relative":
\itemize{
\item{\code{transition}: an estimated transition matrix between states}
\item{\code{states}: a named vector storing states (extant and
ancestral states)}
\item{\code{relative}: a matrix of nodes X states, storing conditional
maximum likelihood being relative to each state}
}
}
\description{
\code{dcAncestralML} is supposed to reconstruct ancestral discrete
states using fast maximum likelihood algorithm. It takes inputs both
the phylo-formatted tree and discrete states in the tips. The algorithm
assumes that state changes can be described by a probablistic
reversible model. It first determines transition matrix between states
(also considering branch lengths), then used dynamic programming (from
tips to the root) to estimate conditional maximum likelihood, and
finally reconstruct the ancestral states (from the root to tips).
}
\note{
This fast dynamic programming for ancestral discrete state
reconstruction is partially inspired by a joint estimation procedure as
described in \url{http://mbe.oxfordjournals.org/content/17/6/890.full}
}
\examples{
# provide the tree and states in the tips
tree <-
"((((t10:5.03,t2:5.03):2.74,(t9:4.17,t5:4.17):3.60):2.80,(t3:4.05,t7:4.05):6.53):2.32,((t6:4.38,t1:4.38):2.18,(t8:2.17,t4:2.17):4.39):6.33);"
phy <- ape::read.tree(text=paste(tree, collapse=""))
x <- c(0, rep(1,4), rep(0,5))

# reconstruct ancestral states
res <- dcAncestralML(x, phy)
res

# visualise the tree with ancestral states and their conditional probability
Ntip <- ape::Ntip(phy)
Nnode <- ape::Nnode(phy)
color <- c("white","gray")
## main tree
ape::plot.phylo(phy, type="p", use.edge.length=TRUE, label.offset=1,
show.tip.label=TRUE, show.node.label=FALSE)
## tips
ape::tiplabels(pch=22, bg=color[as.numeric(x)+1], cex=2, adj=1)
## internal nodes
### conditional maximum likelihood
ape::nodelabels(thermo=res$relative[Ntip+1:Nnode,2:1],
piecol=color[2:1], cex=0.75)
### ancestral states
ape::nodelabels(text=res$states[Ntip+1:Nnode], node=Ntip+1:Nnode,
frame="none", col="red", bg="transparent", cex=0.75)
#ape::nodelabels(text=phy$node.label, node=Ntip+1:Nnode, frame="none", col="red", bg="transparent", cex=0.75)
}
\seealso{
\code{\link{dcAncestralML}}
}

